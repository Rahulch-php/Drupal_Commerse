<?php
	

	/**
 	* @file
 	* Integrates Firstdata Global Gateway e4 API.
 	*/


	/**
 	* Implements hook_init().
 	*/
	function uc_egrfirstdatae4_init() {
  	global $conf;
  	$conf['i18n_variables'][] = 'uc_egrfirstdatae4_method_title';
  	$conf['i18n_variables'][] = 'uc_egrfirstdatae4_checkout_button';
	}

	/**
 	* Implementation of hook_payment_gateway().
 	*/

	function uc_egrfirstdatae4_uc_payment_gateway() {
  	$gateways[] = array(
    	'id' => 'firstdatae4',
    	'title' => t('First data Global Gateway e4'),
    	'description' => t('Process credit card payments using First data Global Gateway e4'),
    	'settings' => 'uc_firstdatae4_settings_form',
    	'credit' => 'uc_egrfirstdatae4_charge',
    	'credit_txn_types' => array(UC_CREDIT_AUTH_ONLY, UC_CREDIT_AUTH_CAPTURE, UC_CREDIT_PRIOR_AUTH_CAPTURE),
  	);
  	return $gateways;
	}


	function uc_firstdatae4_settings_form() {

 	$form['uc_egrfirstdatae4_username'] = array(
        '#type' => 'textfield',
        '#title' => t('Username'),
        '#description' => t('Firstdata GGe4 Username.'),
        '#default_value' => variable_get('uc_egrfirstdatae4_username', ''),
        '#size' => 16,
      	);

     	$form['uc_egrfirstdatae4_gatewayid'] = array(
        '#type' => 'textfield',
        '#title' => t('Gateway id'),
        '#description' => t('Firstdata GGe4 GatewayId.'),
        '#default_value' => variable_get('uc_egrfirstdatae4_gatewayid', ''),
        '#size' => 16,
      	);

      	$form['uc_egrfirstdatae4_gatewaypass'] = array(
        '#type' => 'textfield',
        '#title' => t('Gateway Password'),
        '#description' => t('Firstdata GGe4 Gateway Password.'),
        '#default_value' => variable_get('uc_egrfirstdatae4_gatewaypass', ''),
        '#size' => 16,
      	);

       	$form['uc_egrfirstdatae4_apiver'] = array(
        '#type' => 'select',
        '#title' => t('API Version'),
	'#description' => t('Valid Keyid and HMAC are mandatory for v12'),
        '#options' => array(
          '11' => t('v11'),
          '12' => t('v12'),
        ),
        '#default_value' => variable_get('uc_egrfirstdatae4_apiver', '12'),
      	);

      	$form['uc_egrfirstdatae4_keyid'] = array(
        '#type' => 'textfield',
        '#title' => t('Key Id'),
        '#description' => t('Firstdata GGe4 Key Id. (For API v12 and above)'),
        '#default_value' => variable_get('uc_egrfirstdatae4_keyid', ''),
        '#size' => 16,
      	);
      
      	$form['uc_egrfirstdatae4_hmackey'] = array(
        '#type' => 'textfield',
        '#title' => t('HMAC Key'),
        '#description' => t('Your Firstdata GGe4 HMAC Key. (For API v12 and above)'),
        '#default_value' => variable_get('uc_egrfirstdatae4_hmackey', ''),
        '#size' => 40,
      	);

     	$form['uc_egrfirstdatae4_ccv'] = array(
        '#type' => 'select',
        '#title' => t('Card Verification'),
        '#options' => array(
          'Yes' => t('Yes'),
          'No' => t('No'),
        ),
        '#default_value' => variable_get('uc_egrfirstdatae4_ccv', 'Yes'),
      	);

     	$form['uc_egrfirstdatae4_transactionmode'] = array(
        '#type' => 'select',
        '#title' => t('Transaction Mode'),
        '#options' => array(
          'T' => t('Test'),
          'L' => t('Live'),
        ),
        '#default_value' => variable_get('uc_egrfirstdatae4_transactionmode', 'T'),
      	);
      	return $form;    
	}


	function uc_egrfirstdatae4_charge($order_id, $amount, $data) {
	global $user;

	$order = uc_order_load($order_id);

	$country = uc_get_country_data(array('country_id' => $order->billing_country));
		if ($country === FALSE) {
		    $country = array(0 => array('country_iso_code_3' => 'USA'));
  		}

	if ($order->payment_method == 'credit') {
            if ($order->payment_details['cc_exp_month'] < 10) {
               $order->payment_details['cc_exp_month'] = '0'. $order->payment_details['cc_exp_month'];
            }
        }  
	
  	$x_data = array(
    	"first_name" => html_entity_decode($order->billing_first_name, ENT_QUOTES, 'UTF-8'),
	"last_name" => html_entity_decode($order->billing_last_name, ENT_QUOTES, 'UTF-8'),
	"address" => html_entity_decode($order->billing_street1 . ', ' . $order->billing_street2, ENT_QUOTES, 'UTF-8'),
	"city" => html_entity_decode($order->billing_city, ENT_QUOTES, 'UTF-8'),
	"state" => html_entity_decode($order->billing_zone, ENT_QUOTES, 'UTF-8'),
	"zip" => html_entity_decode($order->billing_postal_code, ENT_QUOTES, 'UTF-8'),
	"country" => html_entity_decode($country[0]['country_iso_code_3'], ENT_QUOTES, 'UTF-8'),
	"phone" => $order->billing_phone,
	"customer_ip" => $_SERVER['REMOTE_ADDR'],
	"email" => html_entity_decode($order->primary_email, ENT_QUOTES, 'UTF-8'),
	"amount" => uc_currency_format($order->order_total, FALSE, FALSE, '.'),
	"currency_code" => $order->currency,
	"method" => 'CC',
	"card_name" => $order->payment_details['cc_owner'],
	"card_num" => $order->payment_details['cc_number'],
	"exp_date" => $order->payment_details['cc_exp_month'].substr($order->payment_details['cc_exp_year'],-2),	
	"card_code" => $order->payment_details['cc_cvv'],
	"order_id" => $order->order_id,
	"customer_id" => $order->uid,
  	);

  	$username		= variable_get('uc_egrfirstdatae4_username', '');
	$gatewayId		= variable_get('uc_egrfirstdatae4_gatewayid', '');
  	$gatewayPassword	= variable_get('uc_egrfirstdatae4_gatewaypass', '');   
	$transaction_mode	= variable_get('uc_egrfirstdatae4_transactionmode', '');				
  	$tran_type		= uc_egrfirstdatae4_map_type($data['txn_type']);
  	$api_version		= variable_get('uc_egrfirstdatae4_apiver', '');
  	$authNum		= '';
  	$amount 		= str_replace(",", "", number_format($amount, 2));
  	$expDate		= $x_data['exp_date'];

  	$response 		= array();
	$trxnProperties 	= array(
	"User_Name"		=> $username,
	"ExactID"		=> $gatewayId,
	"Password"		=> $gatewayPassword,		  
	"Secure_AuthResult"	=> "",
	"Authorization_Num"     => "",
	"Ecommerce_Flag"	=> "0",
	"XID"			=> "",		  
	"CAVV"			=> "",
	"CAVV_Algorithm"	=> "",
	"Transaction_Type"	=> $tran_type, 
	"Reference_No"		=> $x_data["order_id"],
	"Customer_Ref"		=> $x_data["customer_id"],
	"Reference_3"		=> "",
	"Client_IP"		=> $_SERVER["REMOTE_ADDR"],
	"Client_Email"		=> $x_data["email"],
	"Language"		=> "en",
	"Card_Number"		=> $x_data["card_num"],
	"Expiry_Date"		=> $expDate,
	"CardHoldersName"	=> $x_data["card_name"],
	"Track1"		=> "",
	"Track2"		=> "",
	"Transaction_Tag"	=> "",
	"DollarAmount"		=> $amount,
	"VerificationStr1"	=> substr($x_data["address"], 0, 28) . "|" . $x_data["zip"],
	"VerificationStr2"	=> $x_data["card_code"],
	"CVD_Presence_Ind"	=> "",
	"Secure_AuthRequired"	=> "",
	"Currency"		=> $order->currency,
	"PartialRedemption"	=> "",
	"ZipCode"		=> $x_data["zip"],
	"Tax1Amount"		=> "",
	"Tax1Number"		=> "",
	"Tax2Amount"		=> "",
	"Tax2Number"		=> "",		  
	"SurchargeAmount"	=> "",	
	"PAN"			=> ""		  
	);	
	
        if (isset($data['auth_id'])) {
	
        $spl = explode("-", $data['auth_id']);

	if ($data['txn_type'] == UC_CREDIT_PRIOR_AUTH_CAPTURE)
    	$trxnProperties['Authorization_Num'] = $spl[0];
	
	if ($data['txn_type'] == UC_CREDIT_PRIOR_AUTH_CAPTURE)
    	$trxnProperties['Transaction_Tag'] = $spl[1];
        
        }  

  	
	$tvar 	= array("Trxn" => $trxnProperties);
	$error='';	

		if ($api_version == 12) {
   		//API v12	
   			if ($transaction_mode == 'T') {
				$wsdl = 'https://api.demo.globalgatewaye4.firstdata.com/transaction/v12/wsdl';
			} else {
				$wsdl = 'https://api.globalgatewaye4.firstdata.com/transaction/v12/wsdl';
			}
			require_once("firstdatae4.php");
			$client = new SoapClientHMAC($wsdl);
			

		} else {	
		//API v11	
			if ($transaction_mode == 'T') {
				$wsdl = 'https://api.demo.globalgatewaye4.firstdata.com/transaction/wsdl';
			} else {
				$wsdl = 'https://api.globalgatewaye4.firstdata.com/transaction/wsdl';
			}
			$client = new SoapClient($wsdl);
   		}

	
		try {
			$trxnResult = $client->__soapCall('SendAndCommit', $tvar);

		} catch (Exception $e) {
			$error = $e->getMessage();			
    			watchdog('uc_egrfirstdatae4', 'SOAP error: @error', array('@error' => $error), WATCHDOG_ERROR);
			drupal_set_message(t("An error has occurred during SOAP call. Check the Firstdata Global Gateway e4 module settings<br/>
                  		Message : ".$error),'error');
    			return array('success' => FALSE); 
		}
		
		
		if (empty($error)) {
			
			if ($trxnResult->Transaction_Approved == 1) {
      				
				$order_id = $order->order_id;
				$transaction_type = $trxnResult->Transaction_Type;	
			        $transaction_tag = $trxnResult->Transaction_Tag;				
			        $authorization_num = $trxnResult->Authorization_Num;
				$bank_response_code = $trxnResult->Bank_Resp_Code;
				$bank_response_msg = $trxnResult->Bank_Message;
				$transaction_amount = $trxnResult->DollarAmount;
				$client_ip = $trxnResult->Client_IP;
				$avs = $trxnResult->AVS;
				$cvv = $trxnResult->CVV2;
				$ctr = $trxnResult->CTR;	

 				db_insert('uc_payment_egrfirstdatae4')
			        ->fields(array(
			          'order_id' => $order_id,
				  'transaction_type' => $transaction_type,	
			          'transaction_tag' => $transaction_tag,				
			          'authorization_num' => $authorization_num,
				  'bank_response_code' => $bank_response_code,
				  'bank_response_msg' => $bank_response_msg,
				  'client_ip' => $client_ip,
				  'ctr' => $ctr,	
			        ))
			        ->execute();       
				
				$message = t('Type: @type<br />ID: @id', array('@type' => uc_egrfirstdatae4_txn_type($transaction_type), '@id' => 					$transaction_tag));
    				$response = array(
				      'success' => TRUE,
				      'comment' => $message,
				      'message' => $message,
				      'data' => array('module' => 'uc_egrfirstdatae4', 'txn_type' => uc_egrfirstdatae4_txn_type($transaction_type), 'auth_id' => $authorization_num,'txn_id' => $transaction_tag),
				      'uid' => $user->uid,
				    );
				
    				if ($data['txn_type'] == UC_CREDIT_AUTH_ONLY)
				uc_credit_log_authorization($order->order_id, $authorization_num.'-'.$transaction_tag, $amount);
    				
				if ($data['txn_type'] == UC_CREDIT_PRIOR_AUTH_CAPTURE)
      				uc_credit_log_prior_auth_capture($order->order_id, $data['auth_id']);
    				
  				if (in_array($data['txn_type'], array(UC_CREDIT_AUTH_ONLY)))
    				$response['log_payment'] = FALSE;
  								
				$comment = t('<b>Transaction Type:&nbsp;</b>@type<br /><b>Bank Message:&nbsp;</b>@message<br /><b>Amount:&nbsp;</b>@amount<br /	><b>AVS response:&nbsp;</b>@avs',array('@type' => uc_egrfirstdatae4_txn_type($transaction_type),'@message' => $bank_response_msg, '@amount' => uc_currency_format($transaction_amount, FALSE, FALSE, '.'), '@avs' => uc_egrfirstdatae4_avs_response($avs)));

  				$var_cvv = variable_get('uc_egrfirstdatae4_ccv','');
  				if ($var_cvv=='Yes') {
    				$comment .= '<br />'. t('CVV match: @cvv', array('@cvv' => uc_egrfirstdatae4_cvv_response($cvv)));
  				}

 				uc_order_comment_save($order->order_id, $user->uid, $comment, 'admin');
			
				return $response; 

			} else {

				if ($trxnResult->Bank_Resp_Code == '' || $trxnResult->Bank_Resp_Code == '00') {					
						
					$errors = $trxnResult->EXact_Message . ' (' . $trxnResult->EXact_Resp_Code . ')';
					drupal_set_message(t("Card payment declined : ".$errors),'error');
					$response = array(
      					'success' => FALSE,
      					'message' => t('Card payment declined: @message', array('@message' => $errors)),
      					'uid' => $user->uid,
    					);
					return $response; 
				}
				
			}
				
		}
	
	}


	/**
 	* Implements hook_form_alter().
 	*/

	function uc_egrfirstdatae4_form_alter(&$form, $form_state, $form_id) {

  	switch ($form_id) {
  	case 'uc_cart_checkout_form':
      		if (uc_credit_default_gateway() == 'firstdatae4') {
        		if ($form['panes']['payment']['payment_method']['#options']['credit'] != NULL) {
	   			$path = base_path() . drupal_get_path('module', 'uc_egrfirstdatae4'); 
           			$logo = $form['panes']['payment']['payment_method']['#options']['credit'];
           			$logo .= '<br /><img src="' . $path . '/firstdata.gif" style="position: relative; top: 5px; left: 170px;" />';
           			$form['panes']['payment']['payment_method']['#options']['credit'] = $logo;
        		}
      		}
      	break;
	}
	}

	function uc_egrfirstdatae4_txn_type($type) {
  		switch (strtoupper($type)) {
    		case 01:
      		return t('authorize');
    		case 00:
      		return t('auth_capture');
		case 32:
		return t('prior_auth_capture');
  		}
	}


	function uc_egrfirstdatae4_map_type($type) {
  		switch ($type) {
    		case UC_CREDIT_AUTH_ONLY:
      		return '01';
		case UC_CREDIT_AUTH_CAPTURE:
      		return '00';
    		case UC_CREDIT_PRIOR_AUTH_CAPTURE:
      		return '32';
  		}
	}


	function uc_egrfirstdatae4_cvv_response($cvv) {
		$cardcvv = trim($cvv);
		switch ($cardcvv) {
			case 'M': 
				return t('Card is authentic'); 
			case 'N': 
				return t('CVV2 does not match'); 
			case 'P': 
				return t('Card expiration not provided or card does not have valid CVD code'); 
			case 'S': 
				return t('Merchant indicated that CVV2 is not present on card'); 
			case 'U': 
				return t('Card issuer is not certified and/or has not provided visa encryption keys');
			default: 
				return t('Unknown response');
		}
	}

  	
	function uc_egrfirstdatae4_avs_response($avs) {
		$cardavs = trim($avs);
		switch ($cardavs) {
			case 'X': 
				return t('Exact match, 9 digit zip - Street Address, and 9 digit ZIP Code match');
			case 'Y': 
				return t('Exact match, 5 digit zip - Street Address, and 5 digit ZIP Code match');
			case 'A': 
				return t('Partial match - Street Address matches, ZIP Code does not');
			case 'W': 
				return t('Partial match - ZIP Code matches, Street Address does not');
			case 'Z': 
				return t('Partial match - 5 digit ZIP Code match only');
			case 'N': 
				return t('No match - No Address or ZIP Code match');
			case 'U': 
				return t('Address information is unavailable for that account number, or the card issuer does not support');
			case 'G': 
				return t('Service Not supported, non-US Issuer does not participate');
			case 'R': 
				return t('Retry - Issuer system unavailable, retry later');
			case 'E': 
				return t('Not a mail or phone order');
			case 'S': 
				return t('Service not supported');
			case 'Q': 
				return t('Bill to address did not pass edit checks');
			case 'D': 
				return t('International street address and postal code match');
			case 'B': 
				return t('International street address match, postal code not verified due to incompatable formats');
			case 'C': 
				return t('International street address and postal code not verified due to incompatable formats');
			case 'P': 
				return t('International postal code match, street address not verified due to incompatable format');
			case '1': 
				return t('Cardholder name matches');
			case '2': 
				return t('Cardholder name, billing address, and postal code match');
			case '3': 
				return t('Cardholder name and billing postal code match');
			case '4': 
				return t('Cardholder name and billing address match');
			case '5': 
				return t('Cardholder name incorrect, billing address and postal code match');
			case '6': 
				return t('Cardholder name incorrect, billing postal code matches');
			case '7': 
				return t('Cardholder name incorrect, billing address matches');
			case '8': 
				return t('Cardholder name, billing address, and postal code are all incorrect');
			default:
				return t('Unknown Response');	
				
		}
	}